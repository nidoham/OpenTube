package com.nidoham.flowtube.player.playqueue;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

/*------------------------------------------------------------
 * üîπ PlaylistQueue ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏
 * ‡¶è‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ PlayQueue ‡¶è‡¶∞ wrapper ‚Äî ‡¶è‡¶ü‡¶ø streams ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá‡•§
 * ‡¶ï‡¶æ‡¶ú: ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® stream, ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ stream, shuffle, repeat, remove, ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø‡•§
 *------------------------------------------------------------*/
public class PlaylistQueue implements Serializable {

    private static final long serialVersionUID = 1L;

    private final PlayQueue playQueue;
    private boolean shuffleEnabled = false;
    private boolean repeatEnabled = false;

    /*------------------------------------------------------------
     * üî∏ ‡¶ï‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü‡¶∞ ‚Äî ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® PlayQueue ‡¶á‡¶®‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
     *-----------------------------------------------------------*/
    public PlaylistQueue(@NonNull PlayQueue playQueue) {
        Objects.requireNonNull(playQueue, "playQueue must not be null");
        this.playQueue = playQueue;
    }

    /*------------------------------------------------------------
     * üîπ PlayQueue ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ (‡¶Ø‡¶¶‡¶ø direct access ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º)
     *-----------------------------------------------------------*/
    @NonNull
    public PlayQueue getPlayQueue() {
        return playQueue;
    }

    /*------------------------------------------------------------
     * üîπ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶Ø‡¶º
     *-----------------------------------------------------------*/
    @Nullable
    public PlayQueueItem getCurrentStream() {
        return playQueue.getItem();
    }

    /*------------------------------------------------------------
     * üîπ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® index ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶Ø‡¶º
     *-----------------------------------------------------------*/
    public int getCurrentIndex() {
        return playQueue.getIndex();
    }

    /*------------------------------------------------------------
     * üîπ ‡¶∏‡¶¨ streams ‡¶è‡¶∞ list ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶Ø‡¶º
     *-----------------------------------------------------------*/
    @NonNull
    public List<PlayQueueItem> getAllStreams() {
        return playQueue.getStreams();
    }

    /*------------------------------------------------------------
     * üîπ queue ‡¶è‡¶∞ size
     *-----------------------------------------------------------*/
    public int size() {
        return playQueue.size();
    }

    /*------------------------------------------------------------
     * üîπ queue ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
     *-----------------------------------------------------------*/
    public boolean isEmpty() {
        return playQueue.isEmpty();
    }

    /*------------------------------------------------------------
     * üîπ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ (repeat/shuffle ‡¶Ö‡¶®‡ßÅ‡¶ú‡¶æ‡¶Ø‡¶º‡ßÄ)
     *-----------------------------------------------------------*/
    @Nullable
    public PlayQueueItem moveToNext() {
        if (shuffleEnabled) {
            return moveToRandomStream();
        }
        
        playQueue.next();
        return playQueue.getItem();
    }

    /*------------------------------------------------------------
     * üîπ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ
     *-----------------------------------------------------------*/
    @Nullable
    public PlayQueueItem moveToPrevious() {
        if (shuffleEnabled && repeatEnabled) {
            // Shuffle + repeat mode ‡¶è random stream
            return moveToRandomStream();
        }
        
        playQueue.previous();
        return playQueue.getItem();
    }

    /*------------------------------------------------------------
     * üîπ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü index ‡¶è ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ
     *-----------------------------------------------------------*/
    @Nullable
    public PlayQueueItem moveToIndex(int index) {
        playQueue.setIndex(index);
        return playQueue.getItem();
    }

    /*------------------------------------------------------------
     * üîπ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ stream ‡¶¶‡ßá‡¶ñ‡¶æ (index ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá)
     *-----------------------------------------------------------*/
    @Nullable
    public PlayQueueItem peekNext() {
        if (shuffleEnabled) {
            return null; // Shuffle mode ‡¶è ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ item ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶®‡¶Ø‡¶º
        }
        
        int nextIndex = playQueue.getIndex() + 1;
        if (nextIndex >= playQueue.size()) {
            if (repeatEnabled) {
                nextIndex = 0;
            } else {
                return null;
            }
        }
        return playQueue.getItem(nextIndex);
    }

    /*------------------------------------------------------------
     * üîπ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ stream ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ (upcoming list)
     *-----------------------------------------------------------*/
    @NonNull
    public List<PlayQueueItem> getUpcomingStreams() {
        List<PlayQueueItem> list = playQueue.getStreams();
        int current = playQueue.getIndex();
        if (current + 1 >= list.size()) return new ArrayList<>();
        return new ArrayList<>(list.subList(current + 1, list.size()));
    }

    /*------------------------------------------------------------
     * üîπ ‡¶∞‚Äå‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ (shuffle ‡¶Æ‡ßã‡¶°)
     *-----------------------------------------------------------*/
    @Nullable
    private PlayQueueItem moveToRandomStream() {
        List<PlayQueueItem> list = playQueue.getStreams();
        if (list.isEmpty()) return null;
        
        int currentIndex = playQueue.getIndex();
        int randomIndex;
        
        // ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï item ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® item ‡¶¨‡¶æ‡¶¶‡ßá random ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡¶æ
        if (list.size() > 1) {
            do {
                randomIndex = (int) (Math.random() * list.size());
            } while (randomIndex == currentIndex);
        } else {
            randomIndex = 0;
        }
        
        playQueue.setIndex(randomIndex);
        return list.get(randomIndex);
    }

    /*------------------------------------------------------------
     * üîπ Shuffle ‡¶Æ‡ßã‡¶° ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡¶æ
     *-----------------------------------------------------------*/
    public void toggleShuffle() {
        shuffleEnabled = !shuffleEnabled;
    }

    public void setShuffleEnabled(boolean enabled) {
        shuffleEnabled = enabled;
    }

    public boolean isShuffleEnabled() {
        return shuffleEnabled;
    }

    /*------------------------------------------------------------
     * üîπ Repeat ‡¶Æ‡ßã‡¶° ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡¶æ
     *-----------------------------------------------------------*/
    public void toggleRepeat() {
        repeatEnabled = !repeatEnabled;
    }

    public void setRepeatEnabled(boolean enabled) {
        repeatEnabled = enabled;
    }

    public boolean isRepeatEnabled() {
        return repeatEnabled;
    }

    /*------------------------------------------------------------
     * üîπ ‡¶™‡ßÅ‡¶∞‡ßã ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü shuffle ‡¶ï‡¶∞‡¶æ (manual)
     *-----------------------------------------------------------*/
    public void shuffleNow() {
        List<PlayQueueItem> list = new ArrayList<>(playQueue.getStreams());
        PlayQueueItem currentItem = getCurrentStream();
        
        Collections.shuffle(list);
        
        // ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® item ‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ (‡¶Ø‡¶æ‡¶§‡ßá playback ‡¶¨‡¶ø‡¶∞‡¶ï‡ßç‡¶§ ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º)
        if (currentItem != null && list.contains(currentItem)) {
            list.remove(currentItem);
            list.add(0, currentItem);
            playQueue.replaceAll(list, 0);
        } else {
            playQueue.replaceAll(list, 0);
        }
    }

    /*------------------------------------------------------------
     * üîπ Stream ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
     *-----------------------------------------------------------*/
    public void append(@NonNull List<PlayQueueItem> items) {
        playQueue.append(items);
    }

    public void append(@NonNull PlayQueueItem item) {
        playQueue.append(Collections.singletonList(item));
    }

    /*------------------------------------------------------------
     * üîπ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü position ‡¶è insert ‡¶ï‡¶∞‡¶æ
     *-----------------------------------------------------------*/
    public void insert(int position, @NonNull List<PlayQueueItem> items) {
        playQueue.insert(position, items);
    }

    public void insert(int position, @NonNull PlayQueueItem item) {
        playQueue.insert(position, Collections.singletonList(item));
    }

    /*------------------------------------------------------------
     * üîπ Stream ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ
     *-----------------------------------------------------------*/
    public void remove(int index) {
        playQueue.remove(index);
    }

    /*------------------------------------------------------------
     * üîπ Stream move ‡¶ï‡¶∞‡¶æ
     *-----------------------------------------------------------*/
    public void move(int from, int to) {
        playQueue.move(from, to);
    }

    /*------------------------------------------------------------
     * üîπ ‡¶∏‡¶¨ stream clear ‡¶ï‡¶∞‡¶æ
     *-----------------------------------------------------------*/
    public void clear() {
        playQueue.clear();
    }

    /*------------------------------------------------------------
     * üîπ ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡¶æ (‡¶Ø‡ßá‡¶Æ‡¶® fetch ‡¶®‡¶§‡ßÅ‡¶® stream)
     *-----------------------------------------------------------*/
    public void refresh() {
        playQueue.fetch(); // üî∏ PlayQueue-‡¶è‡¶∞ fetch() future implementation ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    }

    /*------------------------------------------------------------
     * üîπ Queue complete ‡¶ï‡¶ø‡¶®‡¶æ (wrap around ‡¶π‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ)
     *-----------------------------------------------------------*/
    public boolean isComplete() {
        return playQueue.isComplete();
    }

    /*------------------------------------------------------------
     * üîπ ‡¶§‡¶•‡ßç‡¶Ø ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶Ø‡¶º (debug/log purpose)
     *-----------------------------------------------------------*/
    @NonNull
    @Override
    public String toString() {
        PlayQueueItem current = getCurrentStream();
        return "PlaylistQueue{" +
                "current=" + (current != null ? current.getTitle() : "null") +
                ", index=" + playQueue.getIndex() +
                ", shuffle=" + shuffleEnabled +
                ", repeat=" + repeatEnabled +
                ", total=" + playQueue.size() +
                ", complete=" + playQueue.isComplete() +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PlaylistQueue)) return false;
        PlaylistQueue that = (PlaylistQueue) o;
        return shuffleEnabled == that.shuffleEnabled &&
                repeatEnabled == that.repeatEnabled &&
                playQueue.equals(that.playQueue);
    }

    @Override
    public int hashCode() {
        return Objects.hash(playQueue, shuffleEnabled, repeatEnabled);
    }
}